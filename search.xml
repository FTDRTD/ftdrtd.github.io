<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>论有哪些高压缩的软件</title>
      <link href="/2025/01/06/%E8%AE%BA%E6%9C%89%E5%93%AA%E4%BA%9B%E9%AB%98%E5%8E%8B%E7%BC%A9%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/2025/01/06/%E8%AE%BA%E6%9C%89%E5%93%AA%E4%BA%9B%E9%AB%98%E5%8E%8B%E7%BC%A9%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="论有哪些高压缩的软件"><a href="#论有哪些高压缩的软件" class="headerlink" title="论有哪些高压缩的软件"></a>论有哪些高压缩的软件</h2><ol><li><p>Zstandard<br><a href="%5Bhttps://%5D(https://facebook.github.io/zstd/)">Zstandard</a><br><img src="/../imges/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-06%20205609.png" alt="alt text"></p></li><li><p>Brotli<br><a href="%5Bhttps://%5D(https://github.com/google/brotli)">Brotli</a><br><img src="/../imges/image.png" alt="alt text"></p></li></ol><h3 id="如果你需要-高压缩率-和-速度均衡，推荐-Zstandard-zstd-或-Brotli。"><a href="#如果你需要-高压缩率-和-速度均衡，推荐-Zstandard-zstd-或-Brotli。" class="headerlink" title="如果你需要 高压缩率 和 速度均衡，推荐 Zstandard (zstd) 或 Brotli。"></a>如果你需要 高压缩率 和 速度均衡，推荐 Zstandard (zstd) 或 Brotli。</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论如何安装谷歌三件套</title>
      <link href="/2025/01/06/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97/"/>
      <url>/2025/01/06/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓系统安装谷歌三件套"><a href="#安卓系统安装谷歌三件套" class="headerlink" title="安卓系统安装谷歌三件套"></a>安卓系统安装谷歌三件套</h1><ul><li>Google 服务框架</li><li>Google play service</li><li>Google play store</li></ul><h3 id="首先尝试直接使用谷歌安装器安装"><a href="#首先尝试直接使用谷歌安装器安装" class="headerlink" title="首先尝试直接使用谷歌安装器安装"></a>首先尝试直接使用谷歌安装器安装</h3><ul><li><a href="https://www.pgyer.com/pOEI">GO谷歌安装器</a></li><li><a href="https://www.wandoujia.com/apps/7971105">SU谷歌安装器</a></li><li><a href="https://www.wandoujia.com/apps/8124836">HIGO谷歌安装器(支持部分华为)</a></li><li><a href="https://www.wandoujia.com/apps/7661165">OurPlay(原谷歌空间)</a></li><li><a href="https://github.com/sky22333/Google-Play-Store/releases">备用下载链接</a></li></ul><hr><blockquote><p>[!TIP]<br>下列方法需要科学上网的支持</p></blockquote><h2 id="1：安装Google服务框架"><a href="#1：安装Google服务框架" class="headerlink" title="1：安装Google服务框架"></a>1：安装Google服务框架</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-services-framework/">Google服务框架下载地址</a></p><h3 id="🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。"><a href="#🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。" class="headerlink" title="🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。"></a>🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。</h3><h2 id="2：安装Google-play-service"><a href="#2：安装Google-play-service" class="headerlink" title="2：安装Google play service"></a>2：安装Google play service</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-play-services/">Google play service下载地址</a></p><h3 id="🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。"><a href="#🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。" class="headerlink" title="🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。"></a>🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。</h3><hr><h2 id="3：安装Google-play-store"><a href="#3：安装Google-play-store" class="headerlink" title="3：安装Google play store"></a>3：安装Google play store</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-play-store/">Google play store下载地址</a></p><h3 id="🔔All-Versions里面选择第一个最新版本就可以了，下载apk版本。"><a href="#🔔All-Versions里面选择第一个最新版本就可以了，下载apk版本。" class="headerlink" title="🔔All Versions里面选择第一个最新版本就可以了，下载apk版本。"></a>🔔All Versions里面选择第一个最新版本就可以了，下载apk版本。</h3><p>所有的方法都不行的话还可以尝试备用方案<a href="https://gboxlab.com/">GBox虚拟空间</a> 支持华为鸿蒙系统</p><h4 id="替代方案（可信的第三方APK商店）"><a href="#替代方案（可信的第三方APK商店）" class="headerlink" title="替代方案（可信的第三方APK商店）"></a>替代方案（可信的第三方APK商店）</h4><ul><li><a href="https://www.apkmirror.com/">APKMirror</a></li><li><a href="https://apkpure.com/cn">APKPure</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌三件套 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的 Telegram 中文包推荐</title>
      <link href="/2025/01/02/8/"/>
      <url>/2025/01/02/8/</url>
      
        <content type="html"><![CDATA[<h2 id="中文语言包"><a href="#中文语言包" class="headerlink" title="中文语言包"></a>中文语言包</h2><p>简体中文（官方 Beta版）：<a href="https://t.me/setlanguage/zh-hans-raw">https://t.me/setlanguage/zh-hans-raw</a><br>繁体中文 (官方 Beta版): <a href="https://t.me/setlanguage/zh-hant-raw">https://t.me/setlanguage/zh-hant-raw</a><br>简体中文(聪聪): <a href="https://t.me/setlanguage/zhcncc">https://t.me/setlanguage/zhcncc</a><br>简体中文(@zh_CN 版): <a href="https://t.me/setlanguage/classic-zh-cn">https://t.me/setlanguage/classic-zh-cn</a><br>简体中文(langCN): <a href="https://t.me/setlanguage/zhlangcn">https://t.me/setlanguage/zhlangcn</a><br>简体中文(瓜体): <a href="https://t.me/setlanguage/duang-zh-cn">https://t.me/setlanguage/duang-zh-cn</a><br>简体中文(小哇): <a href="https://t.me/setlanguage/qingwa">https://t.me/setlanguage/qingwa</a><br>喵体中文 （ @MiaoCN ）: <a href="https://t.me/setlanguage/meowcn">https://t.me/setlanguage/meowcn</a><br>中文（香港）: <a href="https://t.me/setlanguage/hongkong">https://t.me/setlanguage/hongkong</a><br>台湾繁体: <a href="https://t.me/setlanguage/zh-hant-beta">https://t.me/setlanguage/zh-hant-beta</a><br>台湾正体: <a href="https://t.me/setlanguage/taiwan">https://t.me/setlanguage/taiwan</a><br>郭桓桓的繁體中文語言包: <a href="https://t.me/setlanguage/zhong-taiwan-traditional">https://t.me/setlanguage/zhong-taiwan-traditional</a><br>文言: <a href="https://t.me/setlanguage/chinese-ancient">https://t.me/setlanguage/chinese-ancient</a>  </p><h3 id="怎么设置-Telegram-为中文呢？"><a href="#怎么设置-Telegram-为中文呢？" class="headerlink" title="怎么设置 Telegram 为中文呢？"></a>怎么设置 Telegram 为中文呢？</h3><p>Telegram 设置为中文十分简单，只需要点击以上中文汉化包链接，跳转到 Telegram 软件内，点击一下确认按钮，就好了。</p><p>也可以通过导入语言包的压缩包进行语言切换，不过此方式不适合大多数 Telegram 用户，更多的是为开发者准备的。</p><p>如果仍然不会操作，这里有图文教程：一键将 Telegram 「电报」改为中文版（安卓、iOS、Windows、macOS 系统适用）</p><p>关于 Telegram 使用问题，软件交流及更多，可以加入 Telegram 中文群组和广大网友一同探讨：</p><h4 id="警惕山寨的-Telegram-中文版！"><a href="#警惕山寨的-Telegram-中文版！" class="headerlink" title="警惕山寨的 Telegram 中文版！"></a>警惕山寨的 Telegram 中文版！</h4><p>如果你有看到 Telegram 中文网页，不用怀疑，这个是钓鱼网站！Telegram 网站并没有中文语言选项，官方网站地址为 <a href="https://telegram.org/">telegram.org</a>。通过上方的官网截图也可以看到官方网站语言选项中并没有中文选项。请牢记此域名，其他网址多为山寨网站。</p><p>Telegram 中文版、TG 中文版，皆为盗版！请注意！！！</p><h4 id="Telegram-推出中文网站了？谨防山寨-Telegram-网站"><a href="#Telegram-推出中文网站了？谨防山寨-Telegram-网站" class="headerlink" title="Telegram 推出中文网站了？谨防山寨 Telegram 网站"></a>Telegram 推出中文网站了？谨防山寨 Telegram 网站</h4><p>所以目前并没有 Telegram 中文官网。谨记！谨记！不要下载到了携带木马病毒的 Telegram 安装包。</p><h4 id="Telegram-国内使用"><a href="#Telegram-国内使用" class="headerlink" title="Telegram 国内使用"></a>Telegram 国内使用</h4><p>由于 Telegram 服务被屏蔽所以国内使用 Telegram 需要翻墙。目前中国大陆地区手机号（+86）可以正常收到验证短信，只是比较缓慢，一般需要等待几分钟时间。如果你当前有设备处于登录状态，则可以使用此设备的 Telegram App 接收验证码而无需等待发送短信。</p><p>即时可以使用中国国内手机号码注册 Telegram 账号，但更推荐的方式是购买 Google Voice 虚拟号码绑定 Telegram ，以获得更好的隐私保护。</p><p>目前翻墙使用 Telegram 主要有两种方式，一是使用翻墙软件，二是使用 Telegram 官方内置的 MTProxy 代理实现直连（此方式适合开发者，一般用户不推荐）。</p><p>如果你还没有好用的翻墙工具提供商，可以查看节点猫博客推荐的翻墙机场梯子。</p><p>节点猫是一个专注推荐翻墙机场梯子的博客，而 SS&#x2F;SSR&#x2F;V2ray&#x2F;Trojan 机场翻墙也是目前最稳定快速的翻墙方式。科技雷达博主目前找翻墙梯子，也主要是从节点猫博客查找，网站会给出一个机场梯子的优缺点评价，比较方便。</p>]]></content>
      
      
      <categories>
          
          <category> Telegram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegram </tag>
            
            <tag> 推荐 </tag>
            
            <tag> 中文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移</title>
      <link href="/2025/01/02/10/"/>
      <url>/2025/01/02/10/</url>
      
        <content type="html"><![CDATA[<h1 id="Win11-安装-Docker-Desktop-和-WSL2-并进行安装位置迁移"><a href="#Win11-安装-Docker-Desktop-和-WSL2-并进行安装位置迁移" class="headerlink" title="Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移"></a>Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移</h1><h2 id="1-下载为之后使用命令行进行安装"><a href="#1-下载为之后使用命令行进行安装" class="headerlink" title="1. 下载为之后使用命令行进行安装"></a>1. 下载为之后使用命令行进行安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process -Wait -FilePath <span class="string">&quot;Docker Desktop Installer.exe&quot;</span> -ArgumentList <span class="string">&quot;install --installation-dir=D:\Docker&quot;</span></span><br></pre></td></tr></table></figure><p>安装完重启</p><h2 id="2-安装-WSL2"><a href="#2-安装-WSL2" class="headerlink" title="2. 安装 WSL2"></a>2. 安装 WSL2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>此命令会自动安装 WSL2 并默认安装 Ubuntu 发行版。.</p><h3 id="3-设置-WSL2-为默认版本"><a href="#3-设置-WSL2-为默认版本" class="headerlink" title="3. 设置 WSL2 为默认版本"></a>3. 设置 WSL2 为默认版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>设置完Ubuntu用户名以及密码</p><h3 id="4-列出其安装的Liunx系统"><a href="#4-列出其安装的Liunx系统" class="headerlink" title="4. 列出其安装的Liunx系统"></a>4. 列出其安装的Liunx系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>如果运行状态为 Running，需先通过以下命令关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>然后我们通过以下命令将 Ubuntu导出为 tar 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu D:\Ubuntu.tar</span><br></pre></td></tr></table></figure><p>导出成功后，可以在导出的路径下看到导出的 tar 文件</p><p>然后注销并卸载 Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><p>再次查看已安装的 Linux 发行版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>已经注销并卸载了</p><p>然后将其tar导入到新位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu D:\Ubuntu D:\Ubuntu.tar</span><br></pre></td></tr></table></figure><p>注：wsl –import <Distribution Name> <InstallLocation> <FileName><br><Distribution Name> 为目标 Linux 发行版的名称，我安装的为： <code>Ubuntu-22.04</code><br><InstallLocation> 为要安装到的新位置，这里我安装到：<code>E:\ubuntu2204</code><br><FileName> 为要导入的文件名，这里导入刚才导出的 <code>e:\Ubuntu-22.04.tar</code></p><p>导入完成后，再次查看已安装的 Linux 发行版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/cn_ljr/article/details/132047516">Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移_windows 11 wsl 修改安装位置-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Wsl2 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions自动部署Hexo脚本</title>
      <link href="/2025/01/02/9/"/>
      <url>/2025/01/02/9/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网上虽然有很多通过GitHub Actions自动部署Hexo的教程，但都有各种各样的问题。<br>主要问题还是Workflow脚本没有写正确，比如插件部分。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、生成密钥对（这个也不会的话，方法自行Google）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/GitHub-actions-deploy</span><br></pre></td></tr></table></figure><p>然后会获得一个公钥和私钥.</p><h4 id="2、在GitHub-Pages所在的仓库中添加-“公钥”"><a href="#2、在GitHub-Pages所在的仓库中添加-“公钥”" class="headerlink" title="2、在GitHub Pages所在的仓库中添加 “公钥”"></a>2、在GitHub Pages所在的仓库中添加 “公钥”</h4><p>找到仓库的<code>Settings</code>-<code>Deploye keys</code>- <code>Add deploy key</code></p><ul><li><code>Title</code> 填入：<code>ACTION_DEPLOY_KEY</code></li><li><code>Key</code> 填入：<code># 步骤 1 生成的密钥对中的公钥 即ssh-rsa开头的pub文件</code></li><li>必须勾上<code>Allow write access</code></li></ul><h4 id="3、在存放Hexo源代码文件的仓库中添加-“私钥”"><a href="#3、在存放Hexo源代码文件的仓库中添加-“私钥”" class="headerlink" title="3、在存放Hexo源代码文件的仓库中添加 “私钥”"></a>3、在存放Hexo源代码文件的仓库中添加 “私钥”</h4><p>PS:跟步骤2中的仓库可能是同一个，也可能不是同一个。根据自己的选型设置。</p><p>找到仓库的<code>Settings</code>-<code>Secrets</code>- <code>Add a new secret</code></p><ul><li><code>Name</code> 填入：<code>ACTION_DEPLOY_KEY</code></li><li><code>Value</code> 填入：<code># 步骤 1 生成的密钥对中的私钥 没有后缀为pub的是</code></li></ul><h3 id="4、脚本配置"><a href="#4、脚本配置" class="headerlink" title="4、脚本配置"></a>4、脚本配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">name: 自动部署 Hexo</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">  pull_request:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [22.x] # 更新为 Node.js 22</span><br><span class="line">    steps:</span><br><span class="line">      - name: 开始运行</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line"></span><br><span class="line">      - name: 设置 Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v3</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: 缓存 node_modules</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: node-modules-$&#123;&#123; runner.os &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            node-modules-$&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 配置 Git 环境</span><br><span class="line">        env:</span><br><span class="line">          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name &quot;FTDRTD&quot;</span><br><span class="line">          git config --global user.email &quot;angomd@outlook.com&quot;</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo CI</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm i -g hexo-cli</span><br><span class="line">          npm i</span><br><span class="line"></span><br><span class="line">      - name: 安装插件</span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-auto-issue@1.0.4 hexo-deployer-git@4.0.0 hexo-generator-archive@2.0.0 hexo-generator-category@2.0.0 hexo-generator-index@3.0.0 hexo-generator-search@2.4.3 hexo-generator-tag@2.0.0 hexo-renderer-ejs@2.0.0 hexo-renderer-marked@6.3.0 hexo-renderer-pug@3.0.0 hexo-renderer-stylus@3.0.1 hexo-server@3.0.0 hexo-theme-landscape@1.0.0 hexo-wordcount@6.0.1 --save</span><br><span class="line"></span><br><span class="line">      - name: 部署博客</span><br><span class="line">        run: |</span><br><span class="line">          rm -rf .deploy_git</span><br><span class="line">          hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</span><br><span class="line"></span><br><span class="line">      - name: 清理</span><br><span class="line">        run: |</span><br><span class="line">          rm ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">      - name: 检查构建状态</span><br><span class="line">        if: $&#123;&#123; failure() &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          echo &quot;构建失败，请检查日志以获取更多信息。&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - name: 设置 Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">    uses: actions/setup-node@v3</span><br><span class="line">    with:</span><br><span class="line">      node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">  - name: 缓存 node_modules</span><br><span class="line">    uses: actions/cache@v3</span><br><span class="line">    with:</span><br><span class="line">      path: node_modules</span><br><span class="line">      key: node-modules-$&#123;&#123; runner.os &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">      restore-keys: |</span><br><span class="line">        node-modules-$&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">  - name: 配置 Git 环境</span><br><span class="line">    env:</span><br><span class="line">      ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">    run: |</span><br><span class="line">      mkdir -p ~/.ssh/</span><br><span class="line">      echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">      chmod 600 ~/.ssh/id_rsa</span><br><span class="line">      ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">      git config --global user.name &quot;&quot;</span><br><span class="line">      git config --global user.email &quot;&quot;</span><br><span class="line"></span><br><span class="line">  - name: 安装 Hexo CI</span><br><span class="line">    run: |</span><br><span class="line">      export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">      npm i -g hexo-cli</span><br><span class="line">      npm i</span><br><span class="line"></span><br><span class="line">  - name: 安装插件</span><br><span class="line">    run: |</span><br><span class="line">      npm install hexo-auto-issue@1.0.4 hexo-deployer-git@4.0.0 hexo-generator-archive@2.0.0 hexo-generator-category@2.0.0 hexo-generator-index@3.0.0 hexo-generator-search@2.4.3 hexo-generator-tag@2.0.0 hexo-renderer-ejs@2.0.0 hexo-renderer-marked@6.3.0 hexo-renderer-pug@3.0.0 hexo-renderer-stylus@3.0.1 hexo-server@3.0.0 hexo-theme-landscape@1.0.0 hexo-wordcount@6.0.1 --save</span><br><span class="line"></span><br><span class="line">  - name: 部署博客</span><br><span class="line">    run: |</span><br><span class="line">      rm -rf .deploy_git</span><br><span class="line">      hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</span><br><span class="line"></span><br><span class="line">  - name: 清理</span><br><span class="line">    run: |</span><br><span class="line">      rm ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">  - name: 检查构建状态</span><br><span class="line">    if: $&#123;&#123; failure() &#125;&#125;</span><br><span class="line">    run: |</span><br><span class="line">      echo &quot;构建失败，请检查日志以获取更多信息。&quot;</span><br></pre></td></tr></table></figure><h3 id="5、修改一下Actions脚本"><a href="#5、修改一下Actions脚本" class="headerlink" title="5、修改一下Actions脚本"></a>5、修改一下Actions脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&quot;</span><br><span class="line">git config --global user.email &quot;&quot;</span><br><span class="line">git clone https://github.com/*/*.GitHub.io .deploy_git</span><br></pre></td></tr></table></figure><p>修改为自己的数值</p><h3 id="6、其他注意事项"><a href="#6、其他注意事项" class="headerlink" title="6、其他注意事项"></a>6、其他注意事项</h3><ul><li>脚本中插件部分可按自己实际用的插件删改，<code>npm ls --depth 0</code> 可查看自己安装了哪些插件</li><li>如果没有用到 <code>hexo douban</code> 插件，部署命令：<br><code>hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</code> 可改为 <code>hexo g -d</code></li></ul><p>另外一个建议是，所使用的 <code>theme</code> 中的 <code>主题目录</code> 用 <code>git subtree</code> 添加为子项目去维护。<br>这样在多环境多终端发布文章时，不会 <code>clone</code> 或 <code>pull</code> 一个空 <code>theme</code>。</p><h4 id="7、git-push"><a href="#7、git-push" class="headerlink" title="7、git push"></a>7、git push</h4><p>文章写好后，不需要在本地构建，只需要 <code>git push</code> 到GitHub仓库即可自动部署。<br>其中部署方式在Hexo根目录的 <code>_config.yml</code> 中配置。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> GitHub Actions </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从根本上跳过 Pixel 开机引导验证</title>
      <link href="/2024/12/25/6/"/>
      <url>/2024/12/25/6/</url>
      
        <content type="html"><![CDATA[<h2 id="1、twrp中的终端输入："><a href="#1、twrp中的终端输入：" class="headerlink" title="1、twrp中的终端输入："></a>1、twrp中的终端输入：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/dev/block/bootdevice/by-name/frp</span><br></pre></td></tr></table></figure><h2 id="2、或CMD中输入：-进入fastboot"><a href="#2、或CMD中输入：-进入fastboot" class="headerlink" title="2、或CMD中输入：(进入fastboot)"></a>2、或CMD中输入：(进入fastboot)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot erase frp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Pixel </tag>
            
            <tag> 验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生安卓解决WiFi网络受限以及修改NTP服务器</title>
      <link href="/2024/12/25/7/"/>
      <url>/2024/12/25/7/</url>
      
        <content type="html"><![CDATA[<h2 id="解决网络受限"><a href="#解决网络受限" class="headerlink" title="解决网络受限"></a>解决网络受限</h2><ol><li>通过ADB命令的方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_https_url</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_http_url</span><br></pre></td></tr></table></figure><p>再修改新的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate\_204</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate\_204</span><br></pre></td></tr></table></figure><p>上面的不行再试试下面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure><p>运行后断开手机连接，关闭 WiFi 重新打开就解决问题了。</p><ol start="2"><li>修改NTP服务器<br>执行以下命令后重启手机：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop persist.sys.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global ntp_server ntp1.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 原生安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将VS Code 和 Cmder 整合。（设置cmder 为 vs code默认terminal）</title>
      <link href="/2024/12/21/4/"/>
      <url>/2024/12/21/4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Cmder 是 Windows 下一款非常好用的命令行工具，它集成了很多有用的功能，比如：</p><ul><li>自动补全</li><li>历史命令记录</li><li>自定义命令</li><li>任务调度</li><li>自定义快捷键</li></ul><p>VS Code 是微软推出的开源编辑器，它有着强大的插件系统，可以扩展很多功能。</p><p>本文将介绍如何将 VS Code 和 Cmder 整合，使得 VS Code 打开文件时默认使用 Cmder 作为默认终端。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>在vscode中,按下ctrl+shift+p键，输入setting，打开user settings</p></li><li><p>然后依次点击：Features -&gt; Terminal -&gt; Edit in the settings.json</p></li><li><p>进入了setting的json文件，将</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\WINDOWS\\System32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>注释掉，换成：（如果没有上面这行，直接添加下面的三行即可）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.env.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;CMDER_ROOT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[cmder_root]&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/k&quot;</span><span class="punctuation">,</span> <span class="string">&quot;[cmder_root]\\vendor\\init.bat&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>注意，terminal.integrated.shell.windows”确实是 “cmd.exe”，而不是cmder.exe。此外，要将[cmder_root]换成你的cmder安装路径。</p><p>重启vs code，打开terminal，<img src="/imges/4.png" alt="alt text"></p><p>在选择默认配置文件点击Cmder即可:如图所示。<img src="/imges/5.png" alt="alt text"></p><ol start="4"><li>这样，打开文件时，VS Code 会默认使用 Cmder 作为默认终端。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Cmder </tag>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH代理配置</title>
      <link href="/2024/12/21/5/"/>
      <url>/2024/12/21/5/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>本示例假定读者已经在本地10808端口部署了socks5的代理以及http代理。</p><h3 id="1-使用Scoop安装nmap"><a href="#1-使用Scoop安装nmap" class="headerlink" title="1.使用Scoop安装nmap"></a>1.使用Scoop安装nmap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/nmap</span><br></pre></td></tr></table></figure><h3 id="2-ncat-（Windows）"><a href="#2-ncat-（Windows）" class="headerlink" title="2.ncat （Windows）"></a>2.ncat （Windows）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host http://ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    Hostname http://ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    ProxyCommand ncat --verbose --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p</span><br></pre></td></tr></table></figure><p>将其放在.ssh&#x2F;config中，然后就可以使用ssh命令访问github了。</p><h2 id="或者使用HTTPS连接GitHub"><a href="#或者使用HTTPS连接GitHub" class="headerlink" title="或者使用HTTPS连接GitHub"></a>或者使用HTTPS连接GitHub</h2><h3 id="https协议"><a href="#https协议" class="headerlink" title="https协议"></a>https协议</h3><p>https代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>关闭https代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><p>但是目前测试其SSH以及HTTPS,SSH比HTTPS还是慢的多。</p><p>不过目前官方GitHub已经有其自己的源代码管理工具GitHub CLI了</p><p><a href="https://cli.github.com/">https://cli.github.com/</a></p><p>你也可以使用<code>scoop install main/gh</code>进行安装</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> SSH </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Hexo搭建个人博客</title>
      <link href="/2024/12/20/3/"/>
      <url>/2024/12/20/3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他语言）来写作，可以方便地与GitHub Pages集成。Hexo支持丰富的插件，可以让你快速搭建个性化的博客。</p><p>本教程将介绍如何使用Hexo搭建个人博客，并详细介绍Hexo的基本使用方法。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>首先，你需要安装Node.js。你可以到官方网站下载安装包安装Node.js。</p><p>或者使用Scoop安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install versions/nodejs22</span><br></pre></td></tr></table></figure><p>安装好Node.js后，cd到blog文件夹，然后你可以使用npm安装Hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>创建博客的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;folder&gt;</code>是你要创建的博客的文件夹名称。</p><p>例如，如果你要创建名为<code>blog</code>的博客，则命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Hexo提供了丰富的主题，你可以在<a href="https://hexo.io/themes/">这里</a>找到你喜欢的主题。</p><p>安装主题的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install hexo-theme-xxx</span><br></pre></td></tr></table></figure><p>例如，如果你要安装名为<code>landscape</code>的主题，则命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install hexo-theme-landscape</span><br></pre></td></tr></table></figure><h2 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h2><p>启动博客的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Hexo会启动一个本地服务器，你可以在浏览器中访问<code>http://localhost:4000</code>查看博客。</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>在博客文件夹的<code>source/_posts</code>文件夹中，你可以创建新的Markdown文件，来写你的文章。</p><h2 id="相关的命令"><a href="#相关的命令" class="headerlink" title="相关的命令"></a>相关的命令</h2><ul><li><code>hexo new &quot;postName&quot;</code>：创建一个新的文章。</li><li><code>hexo generate</code>：将文章转换为静态页面。</li><li><code>hexo deploy</code>：将静态页面部署到GitHub Pages。</li><li><code>hexo help</code>：查看Hexo的所有命令。</li></ul><h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><p>如果你想将博客部署到GitHub Pages，你需要先在GitHub上创建一个&lt;你的用户名&gt;.github.io的仓库。</p><p>新建Blog仓库放你的博客源代码可私有或者公有。</p><p>进入博客文件夹，配置其_config.yml，找到 url 配置项，修改为你的仓库地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;你的用户名&gt;.github.io</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span></span><br></pre></td></tr></table></figure><p>这里使用SSH方式，需要先配置好SSH。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;&lt;你的邮箱&gt;&quot;</span><br></pre></td></tr></table></figure><p>然后将生成的公钥添加到GitHub的SSH和GPG keys中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后验证你是否链接到了GitHub。要使用Git bash或WSL2，运行以下命令：</p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>成功的话Hi &lt;你的用户名&gt;! You’ve successfully authenticated, but GitHub does not provide shell access.</p><hr><p>如果报这个错误2024-12-20 16:27:46.471 [info] &gt; git clone ssh:&#x2F;&#x2F;<a href="mailto:&#x67;&#105;&#x74;&#64;&#x73;&#x73;&#104;&#46;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#x73;&#x73;&#104;&#46;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a>:443&#x2F;&lt;你的用户名&gt;&#x2F;&lt;你的用户名&gt;.github.io.git d:\vscode_works&lt;你的用户名&gt;.github.io –progress [10472ms]<br>2024-12-20 16:27:46.471 [info] Cloning into ‘d:\vscode_works&lt;你的用户名&gt;.github.io’…<br>Host key verification failed.<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.</p><h3 id="你需要尝试手动添加GitHub-公钥"><a href="#你需要尝试手动添加GitHub-公钥" class="headerlink" title="你需要尝试手动添加GitHub 公钥"></a>你需要尝试手动添加GitHub 公钥</h3><ol><li>打开 Git Bash 或命令行工具，运行以下命令，将 GitHub 的 SSH 公钥添加到 known_hosts 文件中：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan github.com &gt;&gt; C:\Users\ASUS\.ssh\known_hosts</span><br></pre></td></tr></table></figure><ol start="2"><li>确认 known_hosts 文件已存在</li></ol><ul><li>确保 <code>C:\Users\ASUS\.ssh\known_hosts</code> 文件存在，并且可以写入。</li><li>如果该文件不存在，请手动创建它。</li></ul><ol start="3"><li>验证 SSH 密钥是否添加成功</li></ol><hr><p>确保你的 SSH 密钥已经正确配置，并且 GitHub 上已经添加了你的公钥。</p><ol><li>检查本地 SSH 密钥是否正确配置：<br>使用以下命令查看当前是否已加载 SSH 密钥：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -L</span><br></pre></td></tr></table></figure><p>如果没有输出或没有显示你应该用来连接 GitHub 的密钥，你可以通过以下命令添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><ol start="2"><li><p>确保 SSH 公钥已添加到 GitHub<br>登录 GitHub，进入 Settings -&gt; SSH and GPG keys，确认你本地的公钥已经添加到 GitHub。</p></li><li><p>尝试使用正确的 SSH URL<br>确保你正在使用正确的 SSH URL 克隆仓库。尝试以下命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span><br></pre></td></tr></table></figure><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><ol><li>确保安装了</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑 _config.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>或者不使用SSH</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="3"><li>部署博客</li></ol><p>在blog文件夹下，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate </span><br><span class="line">or</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">or </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署完成后，你应该可以访问你的博客了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮箱蜂鸟软件配置</title>
      <link href="/2024/12/20/2/"/>
      <url>/2024/12/20/2/</url>
      
        <content type="html"><![CDATA[<h3 id="邮箱蜂鸟软件配置"><a href="#邮箱蜂鸟软件配置" class="headerlink" title="邮箱蜂鸟软件配置"></a>邮箱蜂鸟软件配置</h3><h4 id="1-想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置"><a href="#1-想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置" class="headerlink" title="1. 想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置"></a>1. 想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置</h4><p>当Gmail检测到内置的Thunderbird浏览器的用户代理时，似乎无法进行身份验证。解决方案是将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">general.useragent.compatMode.firefox</span><br></pre></td></tr></table></figure><p>属性设置为true。这可以通过配置编辑器（编辑-首选项-高级-常规-配置编辑器）来完成。</p><h4 id="2-避免或纠正由于拒绝-Cookie-而导致的-OAuth-错误"><a href="#2-避免或纠正由于拒绝-Cookie-而导致的-OAuth-错误" class="headerlink" title="2. 避免或纠正由于拒绝 Cookie 而导致的 OAuth 错误"></a>2. 避免或纠正由于拒绝 Cookie 而导致的 OAuth 错误</h4><p>首先，检查在常规设置中 Thunderbird 的 Cookie 设置：</p><p>≡ &gt; 设置 &gt; 隐私与安全 &gt; 网络内容。<br>查看 接受网站 Cookie 勾选框。<br>如果 接受网站 Cookie 还 没有 勾选，那么请执行以下操作之一，然后再次进行 OAuth 登录流程：</p><p>创建接受 谷歌 Cookie 的例外：<br>点击 例外… 按钮打开 例外 - Cookie 对话框。<br>在 网站地址 输入框中输入 <code>https://accounts.google.com</code><br>选择 允许，然后 保存更改。</p><p>在完成 OAuth 流程之后，你可以再次拒绝 Cookie，收发邮件不会受到 Cookie 的影响。 但是拒绝所有 Cookie 会导致在 Gmial 的 OAuth 令牌将来过期后还需要再次进行 OAuth 流程，那时仍需接受 Cookie。</p><p>如需详细了解 Cookie，请参看 <a href="https://support.mozilla.org/zh-CN/kb/%E9%9A%90%E7%A7%81%E9%9D%A2%E6%9D%BF%E2%80%94%E2%80%94Thunderbird%E8%BF%9C%E7%A8%8B%E5%86%85%E5%AE%B9%E5%92%8Ccookie%E7%9A%84%E8%AE%BE%E7%BD%AE">隐私面板——Thunderbird远程内容和cookie的设置</a></p><h4 id="3-避免或修复由于禁用-javascript-而导致的-OAuth-失败"><a href="#3-避免或修复由于禁用-javascript-而导致的-OAuth-失败" class="headerlink" title="3.避免或修复由于禁用 javascript 而导致的 OAuth 失败"></a>3.避免或修复由于禁用 javascript 而导致的 OAuth 失败</h4><p>打开 ≡ &gt; 设置 &gt; 常规<br>在 常规 设置面板右下角点击 配置编辑器。<br>将 <code>javascript.enabled</code> 粘贴到 搜索首选项名字 搜索框内。<br>您现在应该看到带有 <code>javascript.enabled</code> 的一个搜索结果。<br>如果您看到 <code>javascript.enabled</code> 且包含 true，则无需更改。<br>如果看到 false，则必须通过单击位于右侧的切换按钮将其更改为 true。</p><h4 id="4-检查认证令牌是否已被保存"><a href="#4-检查认证令牌是否已被保存" class="headerlink" title="4. 检查认证令牌是否已被保存"></a>4. 检查认证令牌是否已被保存</h4><p>打开 ≡ &gt; 设置 &gt; 隐私与安全 &gt; 密码&gt; 已存密码。<br>如果认证方法设置为 OAuth2 并且 OAuth 登录成功，那么你会看到每个用户登录的条目 (gmail account) 如下：</p><p><code>oauth://accounts.google.com (&lt;https://mail.google.com/&gt; …)</code></p><p>注意：这些认证条目是 OAuth2 认证令牌，不是密码。<br>如果认证方法设置为 OAuth2 并且 OAuth 登录 不 成功，那么请检查以下形式的提供商的密码条目并将其删除：</p><p><code>imap://imap.gmail.com (imap://imap.gmail.com)</code></p><p><code>smtp://smtp.gmail.com (smtp://smtp.gmail.com)</code></p><h3 id="通过上面的配置，您应该能够成功地使用蜂鸟登录您的-Gmail-邮箱"><a href="#通过上面的配置，您应该能够成功地使用蜂鸟登录您的-Gmail-邮箱" class="headerlink" title="通过上面的配置，您应该能够成功地使用蜂鸟登录您的 Gmail 邮箱"></a>通过上面的配置，您应该能够成功地使用蜂鸟登录您的 Gmail 邮箱</h3><p>详细请参考<a href="https://support.mozilla.org/zh-CN/kb/google-oauth20">Google 邮件帐户自动转换为 OAuth2.0 身份验证</a></p>]]></content>
      
      
      <categories>
          
          <category> 邮箱配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮箱配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站推荐</title>
      <link href="/2024/11/10/1/"/>
      <url>/2024/11/10/1/</url>
      
        <content type="html"><![CDATA[<h3 id="原版微软系统"><a href="#原版微软系统" class="headerlink" title="原版微软系统"></a>原版微软系统</h3><ol><li><p>Microsoft Software Download Listing <a href="https://msdl.gravesoft.dev/">https://msdl.gravesoft.dev/</a><br><img src="/imges/1.png" alt="alt text"></p></li><li><p>UUP dump <a href="https://www.uupdump.cn/">https://www.uupdump.cn/</a> 推荐使用使用了多线程<br><img src="/imges/2.png" alt="alt text"></p></li></ol><h3 id="第三方修改的微软系统-要付费"><a href="#第三方修改的微软系统-要付费" class="headerlink" title="第三方修改的微软系统(要付费)"></a>第三方修改的微软系统(要付费)</h3><ul><li>不忘初心系统 <a href="https://www.pc528.net/">https://www.pc528.net/</a><br><img src="/imges/3.png" alt="alt text"></li></ul><h3 id="系统激活网站"><a href="#系统激活网站" class="headerlink" title="系统激活网站"></a>系统激活网站</h3><ul><li>Microsoft Activation Scripts (MAS) <a href="https://massgrave.dev/">https://massgrave.dev/</a></li></ul><ol><li><p>打开 PowerShell（不是 CMD）。要这样做，右键单击 Windows 开始菜单，然后选择 PowerShell 或终端。</p></li><li><p>复制以下代码并按回车键</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm https://get.activated.win | iex</span><br></pre></td></tr></table></figure><ol start="3"><li>看到激活选项。选择[1] HWID 进行 Windows 激活。选择[2] Ohook 进行 Office 激活。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
